export default Radar;
declare namespace Radar {
    export { initialize };
    export { setLogLevel };
    export { setUserId };
    export { getUserId };
    export { setDescription };
    export { getDescription };
    export { setMetadata };
    export { getMetadata };
    export { setAnonymousTrackingEnabled };
    export { getPermissionsStatus };
    export { requestPermissions };
    export { getLocation };
    export { trackOnce };
    export { trackVerified };
    export { getVerifiedLocationToken };
    export { startTrackingEfficient };
    export { startTrackingResponsive };
    export { startTrackingContinuous };
    export { startTrackingCustom };
    export { startTrackingVerified };
    export { mockTracking };
    export { stopTracking };
    export { stopTrackingVerified };
    export { isTracking };
    export { getTrackingOptions };
    export { isUsingRemoteTrackingOptions };
    export { setForegroundServiceOptions };
    export { setNotificationOptions };
    export { getTripOptions };
    export { startTrip };
    export { completeTrip };
    export { cancelTrip };
    export { updateTrip };
    export { acceptEvent };
    export { rejectEvent };
    export { getContext };
    export { searchPlaces };
    export { searchGeofences };
    export { autocomplete };
    export { geocode };
    export { reverseGeocode };
    export { ipGeocode };
    export { validateAddress };
    export { getDistance };
    export { getMatrix };
    export { logConversion };
    export { sendEvent };
    export { on };
    export { off };
    export { nativeSdkVersion };
    export { rnSdkVersion };
    export { throwOnUnimplemented };
    export { setDeviceId };
    export { setDeviceType };
    export { setRequestHeaders };
}
declare function initialize(publishableKey: any): void;
declare function setLogLevel(level: any): void;
declare function setUserId(userId: any): void;
declare function getUserId(): Promise<any>;
declare function setDescription(description: any): void;
declare function getDescription(): Promise<any>;
declare function setMetadata(metadata: any): void;
declare function getMetadata(): Promise<any>;
declare function setAnonymousTrackingEnabled(): void;
declare function getPermissionsStatus(): Promise<any>;
declare function requestPermissions(background: any): Promise<any>;
declare function getLocation(): Promise<any>;
declare function trackOnce(options: any): Promise<any>;
declare function trackVerified(): Promise<any>;
declare function getVerifiedLocationToken(): Promise<any>;
declare function startTrackingEfficient(): void;
declare function startTrackingResponsive(): void;
declare function startTrackingContinuous(): void;
declare function startTrackingCustom(options: any): void;
declare function startTrackingVerified(options: any): void;
declare function mockTracking(options: any): void;
declare function stopTracking(): void;
declare function stopTrackingVerified(): void;
declare function isTracking(): Promise<any>;
declare function getTrackingOptions(): Promise<any>;
declare function isUsingRemoteTrackingOptions(): Promise<any>;
declare function setForegroundServiceOptions(options: any): void;
declare function setNotificationOptions(options: any): void;
declare function getTripOptions(): Promise<any>;
declare function startTrip(options: any): Promise<any>;
declare function completeTrip(): Promise<any>;
declare function cancelTrip(): Promise<any>;
declare function updateTrip(tripOptions: any): Promise<any>;
declare function acceptEvent(eventId: any, verifiedPlaceId: any): void;
declare function rejectEvent(eventId: any): void;
declare function getContext(options: any): Promise<any>;
declare function searchPlaces(options: any): Promise<any>;
declare function searchGeofences(options: any): Promise<any>;
declare function autocomplete(options: any): Promise<any>;
declare function geocode(options: any): Promise<any>;
declare function reverseGeocode(options: any): Promise<any>;
declare function ipGeocode(): Promise<any>;
declare function validateAddress(options: any): Promise<any>;
declare function getDistance(options: any): Promise<any>;
declare function getMatrix(options: any): Promise<any>;
declare function logConversion(options: any): Promise<any>;
declare function sendEvent(name: any, metadata: any): void;
declare function on(event: any, callback: any): void;
declare function off(event: any, callback: any): void;
declare function nativeSdkVersion(): Promise<any>;
declare function rnSdkVersion(): string;
declare function throwOnUnimplemented(value: any): void;
declare function setDeviceId(deviceId: any, installId: any): void;
declare function setDeviceType(deviceType: any): void;
declare function setRequestHeaders(headers: any): void;
