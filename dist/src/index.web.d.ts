export default Radar;
declare namespace Radar {
    export { initialize };
    export { setLogLevel };
    export { setUserId };
    export { setDescription };
    export { setMetadata };
    export { getPermissionsStatus };
    export { requestPermissions };
    export { getLocation };
    export { trackOnce };
    export { trackVerified };
    export { trackVerifiedToken };
    export { startTrackingEfficient };
    export { startTrackingResponsive };
    export { startTrackingContinuous };
    export { startTrackingCustom };
    export { mockTracking };
    export { stopTracking };
    export { setForegroundServiceOptions };
    export { acceptEvent };
    export { rejectEvent };
    export { startTrip };
    export { updateTrip };
    export { completeTrip };
    export { cancelTrip };
    export { getContext };
    export { searchPlaces };
    export { searchGeofences };
    export { autocomplete };
    export { geocode };
    export { reverseGeocode };
    export { ipGeocode };
    export { getDistance };
    export { getMatrix };
    export { on };
    export { off };
}
declare function initialize(publishableKey: any): void;
declare function setLogLevel(level: any): void;
declare function setUserId(userId: any): void;
declare function setDescription(description: any): void;
declare function setMetadata(metadata: any): void;
declare function getPermissionsStatus(): Promise<any>;
declare function requestPermissions(background: any): void;
declare function getLocation(): Promise<any>;
declare function trackOnce(options: any): Promise<any>;
declare function trackVerified(): void;
declare function trackVerifiedToken(): void;
declare function startTrackingEfficient(): void;
declare function startTrackingResponsive(): void;
declare function startTrackingContinuous(): void;
declare function startTrackingCustom(options: any): void;
declare function mockTracking(options: any): void;
declare function stopTracking(): void;
declare function setForegroundServiceOptions(options: any): void;
declare function acceptEvent(eventId: any, verifiedPlaceId: any): void;
declare function rejectEvent(eventId: any): void;
declare function startTrip(options: any): Promise<any>;
declare function updateTrip(tripOptions: any): Promise<any>;
declare function completeTrip(): Promise<any>;
declare function cancelTrip(): Promise<any>;
declare function getContext(options: any): Promise<any>;
declare function searchPlaces(options: any): Promise<any>;
declare function searchGeofences(options: any): Promise<any>;
declare function autocomplete(options: any): Promise<any>;
declare function geocode(options: any): Promise<any>;
declare function reverseGeocode(options: any): Promise<any>;
declare function ipGeocode(): Promise<any>;
declare function getDistance(options: any): Promise<any>;
declare function getMatrix(options: any): Promise<any>;
declare function on(event: any, callback: any): void;
declare function off(event: any, callback: any): void;
